---
title: "Introduction to Databases and Data Modelling"
author: "Oliver Gregory"
date: 1 October 2024
format: 
  html:
    page-layout: full
self-contained: true
---

# Conceptual data modelling using the Entity-Relationship (E-R) model

:::{.callout-important title="Queries"}

- What is a cardinality ratio?

:::

## Conceptual modelling

Conceptual modelling referes to the **conceptual database design**, usually expressed through a conceptual model (with high abstraction) or an Entity-Relationship (E-R) model.

E-R models are largely supported by database design tools.
An E-R model comprises data structures (entities), their relationships, and constraints, and is represented through an E-R diagram.

::: callout-tip
It is important to note that the term database application usually refers to a particular database and the associated programs that implement the database queries and updates. Traditionally, the design and test of application programs have been considered part of software engineering rather than database design, but they can be intertwined as they are strongly related.
:::

## Main phases of database design

<center><img src="../images/1_database_design_phases.png" width=80% height=auto></center>

- **Requirements collection and analysis**: database designers interview users to understand and document their data requirements from a mini world scenario.

- **Functional analysis**: the functional requirements refer to user-defined operations (or transactions) that will be applied to the database, including retrievals and updates.

- **Conceptual design**: high-level conceptual schema describing data requirements, entity types, relationships and constraints. No implementation details.

- **Logical design**: implementation of the database using a commercial DBMS. Mapping from the conceptual schema to an implementation data model, such as the relational SQL model.

- **Physical design**: specification of internal structures, file organizations, indexes, access paths, and physical design parameters.

- **Application programs**: they are designed in parallel to the database design, based on high-level transaction specifications.

## Notation for conceptual diagrams

<center><img src="../images/1_diagram_notation.png" width=80% height=auto></center>

## Entities and attributes

An entity may be an object with physical existence, such as a person, car or a house, or an object with conceptual existence, such as a job, a course or a company.

Each entity has attributes that describe the entity. For example, a person entity may have attributes such as name, address, and date of birth. The attributes that describe an entity become a major part of the data stored in a database.

Attributes can be of different types: simple versus composite, single-valued versus multivalued, and stored versus derived. There is also a special case of NULL values for a given attribute.

```{mermaid}
flowchart TD
    A[Entity - employee] --> B([Name: John Smith])
    A --> C([Address: 123 Main St])
    A --> D([Date of Birth: 01/01/1990])

    E[Entity - company] --> F([Name: Sunco Oil])
    E --> G([HQ: Houston, TX])
    E --> H([President: John Smith])
```

### Composite vs simple (atomic) attributes

Composite attributes can be divided into smaller subparts representing more independent attributes with independent meanings. For example, an address attribute can be divided into street, city, county, and post code.

Simple (or atomic) attributes are attributes that are not divisible.

```{mermaid}
flowchart TD
  A[Address]
  A --> C[City]
  A --> B[Street]
  A --> D[County]
  A --> E[Post Code]

  B --> H[Apartment]
  B --> F[Number]
  B --> G[Street]
```

### Single-valued vs multi-valued attributes

Most attributes have a single value for a particular entity (e.g., Age). They are called single-valued.

Multivalued attributes (also referred to as “categorical attributes”) can have a set of values for the same entity. For instance, a Colour attribute for a CAR entity. Cars with one colour have a single value, whereas two-tone cars have two colours and so on. We can also apply lower and upper bounds to constrain the number of values allowed for each entity.

### Stored vs derived attributes

## Null values

## Complex attributes

## Entity types and entity sets

## Representation and key attributes of an entity type

## Value sets (domains) of attributes

## Relationship types and sets

## Relationship degree

## Relationships as attributes

## Role names and recursive relationships

## Cardinality ratios for binary relationships

## Participation constraints and existence dependencies

## Attributes of relationship types

## Weak entity types

## (min, max) notation for conceptual diagrams

## Higher degree (>2) relationships